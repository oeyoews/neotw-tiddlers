created: 20230603143406153
creator: oeyoews
modified: 20240311151848802
modifier: oeyoews
tags: JavaScript
title: 闭包
type: text/vnd.tiddlywiki

闭包: 让开发者可以从内部函数访问外部函数的作用域

一个常见的实际应用闭包的例子是事件监听器。在 JavaScript 中，可以使用闭包来实现事件监听器，以便在函数之外访问事件处理程序中的变量。下面是一个示例：

```javascript
function createButton() {
  var count = 0;
  var button = document.createElement('button');
  button.innerHTML = 'Click me';
  button.addEventListener('click', function() {
    count++;
    console.log('Button clicked ' + count + ' times');
  });
  return button;
}

var button = createButton();
document.body.appendChild(button);
```

在上述代码中，`createButton` 函数返回一个新的按钮元素，并向其添加了一个 `click` 事件监听器。这个事件监听器访问了 `count` 变量，而 `count` 变量是在 `createButton` 函数内部定义的，并且只有事件监听器才能访问它。因此，事件监听器形成了一个闭包，可以访问 `count` 变量并在每次点击按钮时将其值加一。

通过使用闭包，可以将 `count` 变量封装在函数作用域内，避免了全局变量的污染，同时也让代码更加模块化和可维护。