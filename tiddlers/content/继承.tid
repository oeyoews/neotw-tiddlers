created: 20230524110639902
creator: oeyoews
modified: 20230525022835904
modifier: oeyoews
page-cover: https://source.unsplash.com/random?fm=blurhash&w=50&继承
tags: JavaScript
title: 继承
type: text/vnd.tiddlywiki

JavaScript中的继承可以通过原型链实现。具体来说，可以使用`Object.create()`方法创建一个新对象，将父类的原型作为参数传入，然后再将子类的原型设置为这个新对象。这样，子类就可以继承父类的属性和方法了。

下面是一个简单的例子，展示了如何使用原型链实现继承：

```javascript
// 定义一个父类
function Animal(name) {
  this.name = name;
}

// 父类的原型方法
Animal.prototype.sayName = function() {
  console.log('My name is ' + this.name);
};

// 定义一个子类
function Dog(name, breed) {
  Animal.call(this, name); // 调用父类构造函数
  this.breed = breed;
}

// 子类的原型继承父类
Dog.prototype = Object.create(Animal.prototype);
Dog.prototype.constructor = Dog;

// 子类的原型方法
Dog.prototype.bark = function() {
  console.log('Woof!');
};

// 创建一个实例
var myDog = new Dog('Fido', 'Labrador');

// 调用父类的方法
myDog.sayName(); // 输出 "My name is Fido"

// 调用子类的方法
myDog.bark(); // 输出 "Woof!"
```

在上面的例子中，`Dog`类继承了`Animal`类的属性和方法，同时还定义了自己的属性和方法。注意，为了确保`Dog`类的原型指向正确，需要将其`constructor`属性设置为`Dog`本身。

除了使用原型链实现继承之外，JavaScript还提供了其他几种继承方式：

1. 构造函数继承

这种方式是在子类构造函数内部调用父类构造函数，从而实现继承。具体来说，可以使用`call()`或`apply()`方法来调用父类构造函数，并将子类实例作为上下文对象，这样就可以在子类实例上定义父类的属性和方法了。这种方式的缺点是无法继承父类原型上的方法。

```javascript
// 定义一个父类
function Animal(name) {
  this.name = name;
}

// 父类的方法
Animal.prototype.sayName = function() {
  console.log('My name is ' + this.name);
};

// 定义一个子类
function Dog(name, breed) {
  Animal.call(this, name); // 调用父类构造函数
  this.breed = breed;
}

// 创建一个实例
var myDog = new Dog('Fido', 'Labrador');

// 调用父类的方法
myDog.sayName(); // TypeError: myDog.sayName is not a function
```

2. 组合继承

组合继承是将原型链继承和构造函数继承结合起来的一种方式。具体来说，可以通过在子类构造函数内部调用父类构造函数来继承父类的属性，然后再将子类的原型设置为一个新的父类实例，从而继承父类的方法。这种方式的缺点是会调用两次父类构造函数，一次是在子类构造函数内部，一次是在设置子类原型时。这种方式也可以称为伪经典继承。

```javascript
// 定义一个父类
function Animal(name) {
  this.name = name;
}

// 父类的方法
Animal.prototype.sayName = function() {
  console.log('My name is ' + this.name);
};

// 定义一个子类
function Dog(name, breed) {
  Animal.call(this, name); // 调用父类构造函数
  this.breed = breed;
}

// 子类的原型继承父类
Dog.prototype = new Animal();
Dog.prototype.constructor = Dog;

// 创建一个实例
var myDog = new Dog('Fido', 'Labrador');

// 调用父类的方法
myDog.sayName(); // 输出 "My name is Fido"
```

3. ES6的class继承

ES6引入了`class`关键字，使得JavaScript的面向对象编程更加符合传统的类继承方式。使用`class`定义一个类，可以使用`extends`关键字来继承另一个类，从而实现继承。这种方式的优点是语法更加简洁，易于理解。

```javascript
// 定义一个父类
class Animal {
  constructor(name) {
    this.name = name;
  }

  sayName() {
    console.log('My name is ' + this.name);
  }
}

// 定义一个子类
class Dog extends Animal {
  constructor(name, breed) {
    super(name); // 调用父类构造函数
    this.breed = breed;
  }

  bark() {
    console.log('Woof!');
  }
}

// 创建一个实例
var myDog = new Dog('Fido', 'Labrador');

// 调用父类的方法
myDog.sayName(); // 输出 "My name is Fido"

// 调用子类的方法
myDog.bark(); // 输出 "Woof!"
```

以上是几种常见的JavaScript继承方式，每种方式都有其优缺点，选择哪种方式取决于具体的需求和场景。