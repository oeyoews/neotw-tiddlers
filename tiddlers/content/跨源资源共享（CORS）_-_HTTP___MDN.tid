created: 20231107131201454
creator: 太微搜藏
modified: 20231107131201454
modifier: 太微搜藏
tags: 剪藏
title: 跨源资源共享（CORS）_-_HTTP___MDN
type: text/vnd.tiddlywiki
url: https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS

<div id="readability-page-1" class="page"><div><main id="content"><article lang="zh-CN"><header></header><div><p><strong>跨源资源共享</strong>（<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CORS">CORS</a>，或通俗地译为跨域资源共享）是一种基于 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTTP">HTTP</a> 头的机制，该机制通过允许服务器标示除了它自己以外的其他<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Origin">源</a>（域、协议或端口），使得浏览器允许这些源访问加载自己的资源。跨源资源共享还通过一种机制来检查服务器是否会允许要发送的真实请求，该机制通过浏览器发起一个到服务器托管的跨源资源的“预检”请求。在预检中，浏览器发送的头中标示有 HTTP 方法和真实请求中会用到的头。</p>
<p>跨源 HTTP 请求的一个例子：运行在 <code>https://domain-a.com</code> 的 JavaScript 代码使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"><code>XMLHttpRequest</code></a> 来发起一个到 <code>https://domain-b.com/data.json</code> 的请求。</p>
<p>出于安全性，浏览器限制脚本内发起的跨源 HTTP 请求。例如，<code>XMLHttpRequest</code> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API">Fetch API</a> 遵循<a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">同源策略</a>。这意味着使用这些 API 的 Web 应用程序只能从加载应用程序的同一个域请求 HTTP 资源，除非响应报文包含了正确 CORS 响应头。</p>
<p>
  <img src="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS/cors_principle.png" alt="CORS 机制的图表表示" width="957" height="675" loading="lazy">
</p>
<p>CORS 机制允许 Web 应用服务器进行跨源访问控制，从而使跨源数据传输得以安全进行。现代浏览器支持在 API 容器中（例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"><code>XMLHttpRequest</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API">Fetch</a>）使用 CORS，以降低跨源 HTTP 请求所带来的风险。</p></div><section aria-labelledby="什么情况下需要_cors？"><h2 id="什么情况下需要_cors？"><a href="#什么情况下需要_cors？">什么情况下需要 CORS？</a></h2><div><p>这份<a href="https://fetch.spec.whatwg.org/#http-cors-protocol" target="_blank">跨源共享标准</a>允许在下列场景中使用跨站点 HTTP 请求：</p>
<ul>
  <li>前文提到的由 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"><code>XMLHttpRequest</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API">Fetch API</a> 发起的跨源 HTTP 请求。</li>
  <li>Web 字体（CSS 中通过 <code>@font-face</code> 使用跨源字体资源），<a href="https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements" target="_blank">因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用</a>。</li>
  <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL">WebGL 贴图</a>。</li>
  <li>使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage" title="drawImage()"><code>drawImage()</code></a> 将图片或视频画面绘制到 canvas。</li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_shapes/Shapes_from_images" title="Currently only available in English (US)">来自图像的 CSS 图形 <small>(en-US)<small></small></small></a>。</li>
</ul>
<p>本文概述了跨源资源共享机制及其所涉及的 HTTP 标头。</p></div></section><section aria-labelledby="功能概述"><h2 id="功能概述"><a href="#功能概述">功能概述</a></h2><div><p>跨源资源共享标准新增了一组 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">HTTP 标头</a>字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a> 以外的 HTTP 请求，或者搭配某些 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME 类型</a>的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST"><code>POST</code></a> 请求），浏览器必须首先使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS"><code>OPTIONS</code></a> 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨源请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies">Cookie</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Authentication">HTTP 认证</a>相关数据）。</p>
<p>CORS 请求失败会产生错误，但是为了安全，在 JavaScript 代码层面<em>无法</em>获知到底具体是哪里出了问题。你只能查看浏览器的控制台以得知具体是哪里出现了错误。</p>
<p>接下来的内容将讨论相关场景，并剖析该机制所涉及的 HTTP 标头字段。</p></div></section><section aria-labelledby="若干访问控制场景"><h2 id="若干访问控制场景"><a href="#若干访问控制场景">若干访问控制场景</a></h2><p>这里，我们使用三个场景来解释跨源资源共享机制的工作原理。这些例子都使用在任意所支持的浏览器上都可以发出跨域请求的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"><code>XMLHttpRequest</code></a> 对象。</p></section><section aria-labelledby="简单请求"><h3 id="简单请求"><a href="#简单请求">简单请求</a></h3><div><p>某些请求不会触发 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Preflight_request">CORS 预检请求</a>。在废弃的 <a href="https://www.w3.org/TR/2014/REC-cors-20140116/#terminology" target="_blank">CORS 规范</a>中称这样的请求为<em>简单请求</em>，但是目前的 <a href="https://fetch.spec.whatwg.org/" target="_blank">Fetch 规范</a>（CORS 的现行定义规范）中不再使用这个词语。</p>
<p>其动机是，HTML 4.0 中的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form"><code>&lt;form&gt;</code></a> 元素（早于跨站 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"><code>XMLHttpRequest</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/fetch"><code>fetch</code></a>）可以向任何来源提交简单请求，所以任何编写服务器的人一定已经在保护<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CSRF">跨站请求伪造攻击</a>（CSRF）。在这个假设下，服务器不必选择加入（通过响应预检请求）来接收任何看起来像表单提交的请求，因为 CSRF 的威胁并不比表单提交的威胁差。然而，服务器仍然必须提供 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin"><code>Access-Control-Allow-Origin</code></a> 的选择，以便与脚本<em>共享</em>响应。</p>
<p>若请求<strong>满足所有下述条件</strong>，则该请求可视为<em>简单请求</em>：</p>
<ul>
  <li>使用下列方法之一：
    <ul>
      <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a></li>
      <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD"><code>HEAD</code></a></li>
      <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST"><code>POST</code></a></li>
    </ul>
  </li>
  <li>除了被用户代理自动设置的标头字段（例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Connection"><code>Connection</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/User-Agent"><code>User-Agent</code></a> 或其他在 Fetch 规范中定义为<a href="https://fetch.spec.whatwg.org/#forbidden-header-name" target="_blank">禁用标头名称</a>的标头），允许人为设置的字段为 Fetch 规范定义的<a href="https://fetch.spec.whatwg.org/#cors-safelisted-request-header" target="_blank">对 CORS 安全的标头字段集合</a>。该集合为：
    <ul>
      <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept"><code>Accept</code></a></li>
      <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Language"><code>Accept-Language</code></a></li>
      <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Language"><code>Content-Language</code></a></li>
      <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type"><code>Content-Type</code></a>（需要注意额外的限制）</li>
      <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range"><code>Range</code></a>（只允许<a href="https://fetch.spec.whatwg.org/#simple-range-header-value" target="_blank">简单的范围标头值</a> 如 <code>bytes=256-</code> 或 <code>bytes=127-255</code>）</li>
    </ul>
  </li>
  <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type"><code>Content-Type</code></a> 标头所指定的<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/MIME_type">媒体类型</a>的值仅限于下列三者之一：
    <ul>
      <li><code>text/plain</code></li>
      <li><code>multipart/form-data</code></li>
      <li><code>application/x-www-form-urlencoded</code></li>
    </ul>
  </li>
  <li>如果请求是使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"><code>XMLHttpRequest</code></a> 对象发出的，在返回的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/upload"><code>XMLHttpRequest.upload</code></a> 对象属性上没有注册任何事件监听器；也就是说，给定一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"><code>XMLHttpRequest</code></a> 实例 <code>xhr</code>，没有调用 <code>xhr.upload.addEventListener()</code>，以监听该上传请求。</li>
  <li>请求中没有使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream"><code>ReadableStream</code></a> 对象。</li>
</ul>

<p>比如说，假如站点 <code>https://foo.example</code> 的网页应用想要访问 <code>https://bar.other</code> 的资源。<code>foo.example</code> 的网页中可能包含类似于下面的 JavaScript 代码：</p>
<div><pre data-signature="W4QJzGo8WQq7NzdH9X8DE+lQlIYcMQEvmsoArQW5XjQ="><code><span>const</span> xhr <span>=</span> <span>new</span> <span>XMLHttpRequest</span><span>(</span><span>)</span><span>;</span>
<span>const</span> url <span>=</span> <span>"https://bar.other/resources/public-data/"</span><span>;</span>

xhr<span>.</span><span>open</span><span>(</span><span>"GET"</span><span>,</span> url<span>)</span><span>;</span>
xhr<span>.</span>onreadystatechange <span>=</span> someHandler<span>;</span>
xhr<span>.</span><span>send</span><span>(</span><span>)</span><span>;</span>
</code></pre></div>
<p>此操作实行了客户端和服务器之间的简单交换，使用 CORS 标头字段来处理权限：</p>
<p>
  <img src="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS/simple-req.png" alt="简单 GET 请求的示意图" width="1023" height="490" loading="lazy">
</p>
<p>以下是浏览器发送给服务器的请求报文：</p>
<div><pre data-signature="r9TWPsHAnf0k96Bvv/s8IhPYxMs8sC4QtPC512teOP4="><code><span><span>GET</span> <span><span><span>/</span>resources<span>/</span>public-data<span>/</span></span></span> <span>HTTP/1.1</span></span>
<span><span>Host</span><span>:</span> <span>bar.other</span></span>
<span><span>User-Agent</span><span>:</span> <span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0</span></span>
<span><span>Accept</span><span>:</span> <span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span>
<span><span>Accept-Language</span><span>:</span> <span>en-us,en;q=0.5</span></span>
<span><span>Accept-Encoding</span><span>:</span> <span>gzip,deflate</span></span>
<span><span>Connection</span><span>:</span> <span>keep-alive</span></span>
<span><span>Origin</span><span>:</span> <span>https://foo.example</span></span>
</code></pre></div>
<p>请求标头字段 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Origin"><code>Origin</code></a> 表明该请求来源于 <code>http://foo.example</code>。</p>
<p>让我们来看看服务器如何响应：</p>
<div><pre data-signature="3wOlEL7xbMy0pQhNBXSZh2EOvMbLdtPRn9oJYVWEY3M="><code><span><span>HTTP/1.1</span> <span>200</span> <span>OK</span></span>
<span><span>Date</span><span>:</span> <span>Mon, 01 Dec 2008 00:23:53 GMT</span></span>
<span><span>Server</span><span>:</span> <span>Apache/2</span></span>
<span><span>Access-Control-Allow-Origin</span><span>:</span> <span>*</span></span>
<span><span>Keep-Alive</span><span>:</span> <span>timeout=2, max=100</span></span>
<span><span>Connection</span><span>:</span> <span>Keep-Alive</span></span>
<span><span>Transfer-Encoding</span><span>:</span> <span>chunked</span></span>
<span><span>Content-Type</span><span>:</span> <span>application/xml</span></span>
<span>
[…XML Data…]
</span></code></pre></div>
<p>本例中，服务端返回的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin"><code>Access-Control-Allow-Origin</code></a> 标头的 <code>Access-Control-Allow-Origin: *</code> 值表明，该资源可以被<strong>任意</strong>外源访问。</p>
<div><pre data-signature="3H7aSkf+nTZDrQQv/buy4k/x8Ooeh1+9xzHkQqmCpA4="><code><span><span>Access-Control-Allow-Origin</span><span>:</span> <span>*</span></span>
</code></pre></div>
<p>使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Origin"><code>Origin</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin"><code>Access-Control-Allow-Origin</code></a> 就能完成最简单的访问控制。如果 <code>https://bar.other</code> 的资源持有者想限制他的资源<em>只能</em>通过 <code>https://foo.example</code> 来访问（也就是说，非 <code>https://foo.example</code> 域无法通过跨源访问访问到该资源），他可以这样做：</p>
<div><pre data-signature="QaCn4XybBRvi5CQNLevsErLqbT1OHVk4UJ9RgYsMfRg="><code><span><span>Access-Control-Allow-Origin</span><span>:</span> <span>https://foo.example</span></span>
</code></pre></div>
<p><strong>备注：</strong> 当响应的是<a href="#%E9%99%84%E5%B8%A6%E8%BA%AB%E4%BB%BD%E5%87%AD%E8%AF%81%E7%9A%84%E8%AF%B7%E6%B1%82">附带身份凭证的请求</a>时，服务端<strong>必须</strong>明确 <code>Access-Control-Allow-Origin</code> 的值，而不能使用通配符“<code>*</code>”。</p></div></section><section aria-labelledby="预检请求"><h3 id="预检请求"><a href="#预检请求">预检请求</a></h3><div><p>与<a href="#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82">简单请求</a>不同，“需预检的请求”要求必须首先使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS"><code>OPTIONS</code></a> 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。"预检请求“的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响。</p>
<p>如下是一个需要执行预检请求的 HTTP 请求：</p>
<div><pre data-signature="dQbXnbLPqqSXRyIq3EVmkv07pDX2Pjr2poWd7kzdbJc="><code><span>const</span> xhr <span>=</span> <span>new</span> <span>XMLHttpRequest</span><span>(</span><span>)</span><span>;</span>
xhr<span>.</span><span>open</span><span>(</span><span>"POST"</span><span>,</span> <span>"https://bar.other/resources/post-here/"</span><span>)</span><span>;</span>
xhr<span>.</span><span>setRequestHeader</span><span>(</span><span>"X-PINGOTHER"</span><span>,</span> <span>"pingpong"</span><span>)</span><span>;</span>
xhr<span>.</span><span>setRequestHeader</span><span>(</span><span>"Content-Type"</span><span>,</span> <span>"application/xml"</span><span>)</span><span>;</span>
xhr<span>.</span>onreadystatechange <span>=</span> handler<span>;</span>
xhr<span>.</span><span>send</span><span>(</span><span>"&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;"</span><span>)</span><span>;</span>
</code></pre></div>
<p>上面的代码使用 <code>POST</code> 请求发送一个 XML 请求体，该请求包含了一个非标准的 HTTP <code>X-PINGOTHER</code> 请求标头。这样的请求标头并不是 HTTP/1.1 的一部分，但通常对于 web 应用很有用处。另外，该请求的 <code>Content-Type</code> 为 <code>application/xml</code>，且使用了自定义的请求标头，所以该请求需要首先发起“预检请求”。</p>
<p>
  <img src="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS/preflight_correct.png" alt="" width="1024" height="1076" loading="lazy">
</p>
<p><strong>备注：</strong> 如下所述，实际的 <code>POST</code> 请求不会携带 <code>Access-Control-Request-*</code> 标头，它们仅用于 <code>OPTIONS</code> 请求。</p>
<p>下面是服务端和客户端完整的信息交互。首次交互是<em>预检请求/响应</em>：</p>
<div><pre data-signature="3aLYeoiAt6K8Tqu+kKZ10UdbtQ+ynXFRKa38uB25g+I="><code><span><span>OPTIONS</span> <span><span><span>/</span>doc</span></span> <span>HTTP/1.1</span></span>
<span><span>Host</span><span>:</span> <span>bar.other</span></span>
<span><span>User-Agent</span><span>:</span> <span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0</span></span>
<span><span>Accept</span><span>:</span> <span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span>
<span><span>Accept-Language</span><span>:</span> <span>en-us,en;q=0.5</span></span>
<span><span>Accept-Encoding</span><span>:</span> <span>gzip,deflate</span></span>
<span><span>Connection</span><span>:</span> <span>keep-alive</span></span>
<span><span>Origin</span><span>:</span> <span>https://foo.example</span></span>
<span><span>Access-Control-Request-Method</span><span>:</span> <span>POST</span></span>
<span><span>Access-Control-Request-Headers</span><span>:</span> <span>X-PINGOTHER, Content-Type</span></span>

<span><span>HTTP/1.1</span> <span>204</span> <span>No Content</span></span>
<span><span>Date</span><span>:</span> <span>Mon, 01 Dec 2008 01:15:39 GMT</span></span>
<span><span>Server</span><span>:</span> <span>Apache/2</span></span>
<span><span>Access-Control-Allow-Origin</span><span>:</span> <span>https://foo.example</span></span>
<span><span>Access-Control-Allow-Methods</span><span>:</span> <span>POST, GET, OPTIONS</span></span>
<span><span>Access-Control-Allow-Headers</span><span>:</span> <span>X-PINGOTHER, Content-Type</span></span>
<span><span>Access-Control-Max-Age</span><span>:</span> <span>86400</span></span>
<span><span>Vary</span><span>:</span> <span>Accept-Encoding, Origin</span></span>
<span><span>Keep-Alive</span><span>:</span> <span>timeout=2, max=100</span></span>
<span><span>Connection</span><span>:</span> <span>Keep-Alive</span></span>
</code></pre></div>
<p>从上面的报文中，我们看到，第 1 - 10 行使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS"><code>OPTIONS</code></a> 方法发送了预检请求，浏览器根据上面的 JavaScript 代码片断所使用的请求参数来决定是否需要发送，这样服务器就可以回应是否可以接受用实际的请求参数来发送请求。OPTIONS 是 HTTP/1.1 协议中定义的方法，用于从服务器获取更多信息，是<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Safe/HTTP">安全</a>的方法。该方法不会对服务器资源产生影响。注意 OPTIONS 预检请求中同时携带了下面两个标头字段：</p>
<div><pre data-signature="qwaJyPkOOIUXYAVxBSlF5rPyWAn+/Ihg1Um2XG9CK8s="><code><span><span>Access-Control-Request-Method</span><span>:</span> <span>POST</span></span>
<span><span>Access-Control-Request-Headers</span><span>:</span> <span>X-PINGOTHER, Content-Type</span></span>
</code></pre></div>
<p>标头字段 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Method"><code>Access-Control-Request-Method</code></a> 告知服务器，实际请求将使用 <code>POST</code> 方法。标头字段 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Headers"><code>Access-Control-Request-Headers</code></a> 告知服务器，实际请求将携带两个自定义请求标头字段：<code>X-PINGOTHER</code> 与 <code>Content-Type</code>。服务器据此决定，该实际请求是否被允许。</p>
<p>第 12 - 21 行为预检请求的响应，表明服务器将接受后续的实际请求方法（<code>POST</code>）和请求头（<code>X-PINGOTHER</code>）。重点看第 15 - 18 行：</p>
<div><pre data-signature="85WsuhNZWZQxgfBenztOdWwurA0+bSFg3yXMn4b7NXM="><code><span><span>Access-Control-Allow-Origin</span><span>:</span> <span>https://foo.example</span></span>
<span><span>Access-Control-Allow-Methods</span><span>:</span> <span>POST, GET, OPTIONS</span></span>
<span><span>Access-Control-Allow-Headers</span><span>:</span> <span>X-PINGOTHER, Content-Type</span></span>
<span><span>Access-Control-Max-Age</span><span>:</span> <span>86400</span></span>
</code></pre></div>
<p>服务器的响应携带了 <code>Access-Control-Allow-Origin: https://foo.example</code>，从而限制请求的源域。同时，携带的 <code>Access-Control-Allow-Methods</code> 表明服务器允许客户端使用 <code>POST</code> 和 <code>GET</code> 方法发起请求（与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Allow"><code>Allow</code></a> 响应标头类似，但该标头具有严格的访问控制）。</p>
<p>标头字段 <code>Access-Control-Allow-Headers</code> 表明服务器允许请求中携带字段 <code>X-PINGOTHER</code> 与 <code>Content-Type</code>。与 <code>Access-Control-Allow-Methods</code> 一样，<code>Access-Control-Allow-Headers</code> 的值为逗号分割的列表。</p>
<p>最后，标头字段 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Max-Age"><code>Access-Control-Max-Age</code></a> 给定了该预检请求可供缓存的时间长短，单位为秒，默认值是 5 秒。在有效时间内，浏览器无须为同一请求再次发起预检请求。以上例子中，该响应的有效时间为 86400 秒，也就是 24 小时。请注意，浏览器自身维护了一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Max-Age">最大有效时间</a>，如果该标头字段的值超过了最大有效时间，将不会生效。</p>
<p>预检请求完成之后，发送实际请求：</p>
<div><pre data-signature="nXj6smPOwLA/bPhjdxP/uNbxsZJih5JYJleIEoYYCE4="><code><span><span>POST</span> <span><span><span>/</span>doc</span></span> <span>HTTP/1.1</span></span>
<span><span>Host</span><span>:</span> <span>bar.other</span></span>
<span><span>User-Agent</span><span>:</span> <span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0</span></span>
<span><span>Accept</span><span>:</span> <span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span>
<span><span>Accept-Language</span><span>:</span> <span>en-us,en;q=0.5</span></span>
<span><span>Accept-Encoding</span><span>:</span> <span>gzip,deflate</span></span>
<span><span>Connection</span><span>:</span> <span>keep-alive</span></span>
<span><span>X-PINGOTHER</span><span>:</span> <span>pingpong</span></span>
<span><span>Content-Type</span><span>:</span> <span>text/xml; charset=UTF-8</span></span>
<span><span>Referer</span><span>:</span> <span>https://foo.example/examples/preflightInvocation.html</span></span>
<span><span>Content-Length</span><span>:</span> <span>55</span></span>
<span><span>Origin</span><span>:</span> <span>https://foo.example</span></span>
<span><span>Pragma</span><span>:</span> <span>no-cache</span></span>
<span><span>Cache-Control</span><span>:</span> <span>no-cache</span></span>

&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;

<span><span>HTTP/1.1</span> <span>200</span> <span>OK</span></span>
<span><span>Date</span><span>:</span> <span>Mon, 01 Dec 2008 01:15:40 GMT</span></span>
<span><span>Server</span><span>:</span> <span>Apache/2</span></span>
<span><span>Access-Control-Allow-Origin</span><span>:</span> <span>https://foo.example</span></span>
<span><span>Vary</span><span>:</span> <span>Accept-Encoding, Origin</span></span>
<span><span>Content-Encoding</span><span>:</span> <span>gzip</span></span>
<span><span>Content-Length</span><span>:</span> <span>235</span></span>
<span><span>Keep-Alive</span><span>:</span> <span>timeout=2, max=99</span></span>
<span><span>Connection</span><span>:</span> <span>Keep-Alive</span></span>
<span><span>Content-Type</span><span>:</span> <span>text/plain</span></span>
<span>
[Some XML payload]
</span></code></pre></div>
<h4 id="预检请求与重定向">预检请求与重定向</h4>
<p>并不是所有浏览器都支持预检请求的重定向。如果一个预检请求发生了重定向，一部分浏览器将报告错误：</p>
<blockquote>
  <p>
    The request was redirected to '<a href="https://example.com/foo" target="_blank">https://example.com/foo</a>', which is disallowed for cross-origin requests that require preflight.
    Request requires preflight, which is disallowed to follow cross-origin redirects.
  </p>
</blockquote>
<p>CORS 最初要求浏览器具有该行为，不过在后续的<a href="https://github.com/whatwg/fetch/commit/0d9a4db8bc02251cc9e391543bb3c1322fb882f2" target="_blank">修订</a>中废弃了这一要求。但并非所有浏览器都实现了这一变更，而仍然表现出最初要求的行为。</p>
<p>在浏览器的实现跟上规范之前，有两种方式规避上述报错行为：</p>
<ul>
  <li>在服务端去掉对预检请求的重定向；</li>
  <li>将实际请求变成一个<a href="#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82">简单请求</a>。</li>
</ul>
<p>如果上面两种方式难以做到，我们仍有其他办法：</p>
<ol>
  <li>发出一个<a href="#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82">简单请求</a>（使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response/url"><code>Response.url</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/responseURL"><code>XMLHttpRequest.responseURL</code></a>）以判断真正的预检请求会返回什么地址。</li>
  <li>发出另一个请求（<em>真正</em>的请求），使用在上一步通过 <code>Response.url</code> 或 <code>XMLHttpRequest.responseURL</code> 获得的 URL。</li>
</ol>
<p>不过，如果请求是由于存在 <code>Authorization</code> 字段而引发了预检请求，则这一方法将无法使用。这种情况只能由服务端进行更改。</p></div></section><section aria-labelledby="附带身份凭证的请求"><h3 id="附带身份凭证的请求"><a href="#附带身份凭证的请求">附带身份凭证的请求</a></h3><div><p><strong>备注：</strong> 当发出跨源请求时，第三方 cookie 策略仍将适用。无论如何改变本章节中描述的服务器和客户端的设置，该策略都会强制执行。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"><code>XMLHttpRequest</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API">Fetch</a> 与 CORS 的一个有趣的特性是，可以基于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies">HTTP cookies</a> 和 HTTP 认证信息发送身份凭证。一般而言，对于跨源 <code>XMLHttpRequest</code> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API">Fetch</a> 请求，浏览器<strong>不会</strong>发送身份凭证信息。如果要发送凭证信息，需要设置 <code>XMLHttpRequest</code> 对象的某个特殊标志位，或在构造 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Request"><code>Request</code></a> 对象时设置。</p>
<p>本例中，<code>https://foo.example</code> 的某脚本向 <code>https://bar.other</code> 发起一个 GET 请求，并设置 Cookies。在 <code>foo.example</code> 中可能包含这样的 JavaScript 代码：</p>
<div><pre data-signature="3/+U+XIavowhBVDMXxDWGvXHKnG1B9W60olm9WgwviI="><code><span>const</span> invocation <span>=</span> <span>new</span> <span>XMLHttpRequest</span><span>(</span><span>)</span><span>;</span>
<span>const</span> url <span>=</span> <span>"https://bar.other/resources/credentialed-content/"</span><span>;</span>

<span>function</span> <span>callOtherDomain</span><span>(</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>invocation<span>)</span> <span>{</span>
    invocation<span>.</span><span>open</span><span>(</span><span>"GET"</span><span>,</span> url<span>,</span> <span>true</span><span>)</span><span>;</span>
    invocation<span>.</span>withCredentials <span>=</span> <span>true</span><span>;</span>
    invocation<span>.</span>onreadystatechange <span>=</span> handler<span>;</span>
    invocation<span>.</span><span>send</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre></div>
<p>第 7 行将 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"><code>XMLHttpRequest</code></a> 的 <code>withCredentials</code> 标志设置为 <code>true</code>，从而向服务器发送 Cookies。因为这是一个简单 <code>GET</code> 请求，所以浏览器不会对其发起“预检请求”。但是，如果服务器端的响应中未携带 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials"><code>Access-Control-Allow-Credentials</code></a><code>: true</code>，浏览器将<strong>不会</strong>把响应内容返回给请求的发送者。</p>
<p>
  <img src="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS/cred-req-updated.png" alt="" width="1023" height="490" loading="lazy">
</p>
<p>客户端与服务器端交互示例如下：</p>
<div><pre data-signature="C7pBA4kD1UkOeXyS6pSUkByxE3bwdI95y6WJyygT/rk="><code><span><span>GET</span> <span><span><span>/</span>resources<span>/</span>credentialed-content<span>/</span></span></span> <span>HTTP/1.1</span></span>
<span><span>Host</span><span>:</span> <span>bar.other</span></span>
<span><span>User-Agent</span><span>:</span> <span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0</span></span>
<span><span>Accept</span><span>:</span> <span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span>
<span><span>Accept-Language</span><span>:</span> <span>en-us,en;q=0.5</span></span>
<span><span>Accept-Encoding</span><span>:</span> <span>gzip,deflate</span></span>
<span><span>Connection</span><span>:</span> <span>keep-alive</span></span>
<span><span>Referer</span><span>:</span> <span>https://foo.example/examples/credential.html</span></span>
<span><span>Origin</span><span>:</span> <span>https://foo.example</span></span>
<span><span>Cookie</span><span>:</span> <span>pageAccess=2</span></span>

<span><span>HTTP/1.1</span> <span>200</span> <span>OK</span></span>
<span><span>Date</span><span>:</span> <span>Mon, 01 Dec 2008 01:34:52 GMT</span></span>
<span><span>Server</span><span>:</span> <span>Apache/2</span></span>
<span><span>Access-Control-Allow-Origin</span><span>:</span> <span>https://foo.example</span></span>
<span><span>Access-Control-Allow-Credentials</span><span>:</span> <span>true</span></span>
<span><span>Cache-Control</span><span>:</span> <span>no-cache</span></span>
<span><span>Pragma</span><span>:</span> <span>no-cache</span></span>
<span><span>Set-Cookie</span><span>:</span> <span>pageAccess=3; expires=Wed, 31-Dec-2008 01:34:53 GMT</span></span>
<span><span>Vary</span><span>:</span> <span>Accept-Encoding, Origin</span></span>
<span><span>Content-Encoding</span><span>:</span> <span>gzip</span></span>
<span><span>Content-Length</span><span>:</span> <span>106</span></span>
<span><span>Keep-Alive</span><span>:</span> <span>timeout=2, max=100</span></span>
<span><span>Connection</span><span>:</span> <span>Keep-Alive</span></span>
<span><span>Content-Type</span><span>:</span> <span>text/plain</span></span>
<span>
[text/plain payload]
</span></code></pre></div>
<p>即使第 10 行指定了 Cookie 是属于 <code>https://bar.other</code> 的内容的，但是，如果 <code>https://bar.other</code> 的响应中缺失 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials"><code>Access-Control-Allow-Credentials</code></a><code>: true</code>（第 16 行），则响应内容会被忽略，不会提供给 web 内容。</p>
<h4 id="预检请求和凭据">预检请求和凭据</h4>
<p>CORS 预检请求不能包含凭据。预检请求的<em>响应</em>必须指定 <code>Access-Control-Allow-Credentials: true</code> 来表明可以携带凭据进行实际的请求。</p>
<div id="sect5">
  <p><strong>备注：</strong> 一些企业认证服务要求在预检请求时发送 TLS 客户端证书，这违反了 <a href="https://fetch.spec.whatwg.org/#cors-protocol-and-credentials" target="_blank">Fetch</a> 的规范。</p>
  <p>Firefox 87 允许通过在设置中设定 <code>network.cors_preflight.allow_client_cert</code> 为 <code>true</code>（<a href="https://bugzil.la/1511151" target="_blank">Firefox bug 1511151</a>）来允许这种不规范的行为。基于 chromium 的浏览器目前总是在 CORS 预检请求中发送 TLS 客户端证书（<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=775438" target="_blank">Chrome bug 775438</a>）。</p>
</div>
<h4 id="附带身份凭证的请求与通配符">附带身份凭证的请求与通配符</h4>
<p>在响应附带身份凭证的请求时：</p>
<ul>
  <li>服务器<strong>不能</strong>将 <code>Access-Control-Allow-Origin</code> 的值设为通配符“<code>*</code>”，而应将其设置为特定的域，如：<code>Access-Control-Allow-Origin: https://example.com</code>。</li>
  <li>服务器<strong>不能</strong>将 <code>Access-Control-Allow-Headers</code> 的值设为通配符“<code>*</code>”，而应将其设置为标头名称的列表，如：<code>Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</code></li>
  <li>服务器<strong>不能</strong>将 <code>Access-Control-Allow-Methods</code> 的值设为通配符“<code>*</code>”，而应将其设置为特定请求方法名称的列表，如：<code>Access-Control-Allow-Methods: POST, GET</code></li>
</ul>
<p>对于附带身份凭证的请求（通常是 <code>Cookie</code>），</p>
<p>这是因为请求的标头中携带了 <code>Cookie</code> 信息，如果 <code>Access-Control-Allow-Origin</code> 的值为“<code>*</code>”，请求将会失败。而将 <code>Access-Control-Allow-Origin</code> 的值设置为 <code>https://example.com</code>，则请求将成功执行。</p>
<p>另外，响应标头中也携带了 <code>Set-Cookie</code> 字段，尝试对 Cookie 进行修改。如果操作失败，将会抛出异常。</p>
<h4 id="第三方_cookie">第三方 cookie</h4>
<p>注意在 CORS 响应中设置的 cookie 适用一般性第三方 cookie 策略。在上面的例子中，页面是在 <code>foo.example</code> 加载，但是第 19 行的 cookie 是被 <code>bar.other</code> 发送的，如果用户设置其浏览器拒绝所有第三方 cookie，那么将不会被保存。</p>
<p>请求中的 cookie（第 10 行）也可能在正常的第三方 cookie 策略下被阻止。因此，强制执行的 cookie 策略可能会使本节描述的内容无效（阻止你发出任何携带凭据的请求）。</p>
<p>Cookie 策略受 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value">SameSite</a> 属性控制。</p></div></section><section aria-labelledby="http_响应标头字段"><h2 id="http_响应标头字段"><a href="#http_响应标头字段">HTTP 响应标头字段</a></h2><p>本节列出了服务器为访问控制请求返回的 HTTP 响应头，这是由跨源资源共享规范定义的。上一小节中，我们已经看到了这些标头字段在实际场景中是如何工作的。</p></section><section aria-labelledby="access-control-allow-origin"><h3 id="access-control-allow-origin"><a href="#access-control-allow-origin">Access-Control-Allow-Origin</a></h3><div><p>响应标头中可以携带一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin"><code>Access-Control-Allow-Origin</code></a> 字段，其语法如下：</p>
<div><pre data-signature="boqeKi5NfeMvWUC6PTq5UtnuH+w3qXMjQtXvN2GiKA0="><code><span><span>Access-Control-Allow-Origin</span><span>:</span> <span>&lt;origin&gt; | *</span></span>
</code></pre></div>
<p><code>Access-Control-Allow-Origin</code> 参数指定了单一的源，告诉浏览器允许该源访问资源。或者，对于<strong>不需要携带</strong>身份凭证的请求，服务器可以指定该字段的值为通配符“<code>*</code>”，表示允许来自任意源的请求。</p>
<p>例如，为了允许来自 <code>https://mozilla.org</code> 的代码访问资源，你可以指定：</p>
<div><pre data-signature="B6YC2K+Uu9ENzQskhMZRBGL075vMXsUe1clvNg7Vvw4="><code><span><span>Access-Control-Allow-Origin</span><span>:</span> <span>https://mozilla.org</span></span>
<span><span>Vary</span><span>:</span> <span>Origin</span></span>
</code></pre></div>
<p>如果服务端指定了具体的单个源（作为允许列表的一部分，可能会根据请求的来源而动态改变）而非通配符“<code>*</code>”，那么响应标头中的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Vary"><code>Vary</code></a> 字段的值必须包含 <code>Origin</code>。这将告诉客户端：服务器对不同的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Origin"><code>Origin</code></a> 返回不同的内容。</p></div></section><div aria-labelledby="access-control-expose-headers"><p>译者注：在跨源访问时，<code>XMLHttpRequest</code> 对象的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/getResponseHeader" title="getResponseHeader()"><code>getResponseHeader()</code></a> 方法只能拿到一些最基本的响应头，Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Expose-Headers"><code>Access-Control-Expose-Headers</code></a> 头将指定标头放入允许列表中，供浏览器的 JavaScript 代码（如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/getResponseHeader" title="getResponseHeader()"><code>getResponseHeader()</code></a>）获取。</p>
<div><pre data-signature="9NmxVopG0qlk3rZaZOgetknJnEIj0iH6NEZYI4ASK7Y="><code><span><span>Access-Control-Expose-Headers</span><span>:</span> <span>&lt;header-name&gt;[, &lt;header-name&gt;]*</span></span>
</code></pre></div>
<p>例如：</p>
<div><pre data-signature="2CdeTkpqhqIkccr+fYL74u0m2v54cGiRp2epJKum0xM="><code><span><span>Access-Control-Expose-Headers</span><span>:</span> <span>X-My-Custom-Header, X-Another-Custom-Header</span></span>
</code></pre></div>
<p>这样浏览器就能够通过 <code>getResponseHeader</code> 访问 <code>X-My-Custom-Header</code> 和 <code>X-Another-Custom-Header</code> 响应头了。</p></div><section aria-labelledby="access-control-max-age"><h3 id="access-control-max-age"><a href="#access-control-max-age">Access-Control-Max-Age</a></h3><div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Max-Age"><code>Access-Control-Max-Age</code></a> 头指定了 preflight 请求的结果能够被缓存多久，请参考本文在前面提到的 preflight 例子。</p>
<div><pre data-signature="dNBdosA2NQTnLXLlTCD5WqFwegWLDSQoJMxIVIQ+W0Q="><code><span><span>Access-Control-Max-Age</span><span>:</span> <span>&lt;delta-seconds&gt;</span></span>
</code></pre></div>
<p><code>delta-seconds</code> 参数表示 preflight 预检请求的结果在多少秒内有效。</p></div></section><section aria-labelledby="access-control-allow-credentials"><h3 id="access-control-allow-credentials"><a href="#access-control-allow-credentials">Access-Control-Allow-Credentials</a></h3><div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials"><code>Access-Control-Allow-Credentials</code></a> 头指定了当浏览器的 <code>credentials</code> 设置为 true 时是否允许浏览器读取 response 的内容。当用在对 preflight 预检测请求的响应中时，它指定了实际的请求是否可以使用 <code>credentials</code>。请注意：简单 <code>GET</code> 请求不会被预检；如果对此类请求的响应中不包含该字段，这个响应将被忽略掉，并且浏览器也不会将相应内容返回给网页。</p>
<div><pre data-signature="f6KFOs8cMNN014eYxn51JHl1jPPkMsvqByuG+9T3FWI="><code><span><span>Access-Control-Allow-Credentials</span><span>:</span> <span>true</span></span>
</code></pre></div>
<p>上文已经讨论了<a href="#%E9%99%84%E5%B8%A6%E8%BA%AB%E4%BB%BD%E5%87%AD%E8%AF%81%E7%9A%84%E8%AF%B7%E6%B1%82">附带身份凭证的请求</a>。</p></div></section><section aria-labelledby="access-control-allow-methods"><h3 id="access-control-allow-methods"><a href="#access-control-allow-methods">Access-Control-Allow-Methods</a></h3><div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Methods"><code>Access-Control-Allow-Methods</code></a> 标头字段指定了访问资源时允许使用的请求方法，用于预检请求的响应。其指明了实际请求所允许使用的 HTTP 方法。</p>
<div><pre data-signature="7+FwtG0olI2tKBLSwnBbZSQi+brd10ATL15vXDHZZ/g="><code><span><span>Access-Control-Allow-Methods</span><span>:</span> <span>&lt;method&gt;[, &lt;method&gt;]*</span></span>
</code></pre></div>
<p>有关<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Preflight_request">预检请求</a>的示例已在上方给出，包含了将此请求头发送至浏览器的示例。</p></div></section><div aria-labelledby="access-control-allow-headers"><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Headers"><code>Access-Control-Allow-Headers</code></a> 标头字段用于<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Preflight_request">预检请求</a>的响应。其指明了实际请求中允许携带的标头字段。这个标头是服务器端对浏览器端 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Headers"><code>Access-Control-Request-Headers</code></a> 标头的响应。</p>
<div><pre data-signature="Za8XCZnFbqFelZPiBZcgDf0/DQ9mJlj49+7OCGKx2zU="><code><span><span>Access-Control-Allow-Headers</span><span>:</span> <span>&lt;header-name&gt;[, &lt;header-name&gt;]*</span></span>
</code></pre></div></div><section aria-labelledby="http_请求标头字段"><h2 id="http_请求标头字段"><a href="#http_请求标头字段">HTTP 请求标头字段</a></h2><p>本节列出了可用于发起跨源请求的标头字段。请注意，这些标头字段无须手动设置。当开发者使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"><code>XMLHttpRequest</code></a> 对象发起跨源请求时，它们已经被设置就绪。</p></section><section aria-labelledby="origin"><h3 id="origin"><a href="#origin">Origin</a></h3><div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Origin"><code>Origin</code></a> 标头字段表明预检请求或实际跨源请求的源站。</p>

<p>origin 参数的值为源站 URL。它不包含任何路径信息，只是服务器名称。</p>
<p><strong>备注：</strong> <code>origin</code> 的值可以为 <code>null</code>。</p>
<p>注意，在所有访问控制请求中，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Origin"><code>Origin</code></a> 标头字段<strong>总是</strong>被发送。</p></div></section><section aria-labelledby="access-control-request-method"><h3 id="access-control-request-method"><a href="#access-control-request-method">Access-Control-Request-Method</a></h3><div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Method"><code>Access-Control-Request-Method</code></a> 标头字段用于预检请求。其作用是，将实际请求所使用的 HTTP 方法告诉服务器。</p>
<div><pre data-signature="EHeIG/Ijcz9x8vHgm7zU4Xf9XvGBTnc/tZ2Is0yHrmI="><code><span><span>Access-Control-Request-Method</span><span>:</span> <span>&lt;method&gt;</span></span>
</code></pre></div>
<p>相关示例见<a href="#%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82">这里</a>。</p></div></section><div aria-labelledby="access-control-request-headers"><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Headers"><code>Access-Control-Request-Headers</code></a> 标头字段用于预检请求。其作用是，将实际请求所携带的标头字段（通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/setRequestHeader" title="setRequestHeader()"><code>setRequestHeader()</code></a> 等设置的）告诉服务器。这个浏览器端标头将由互补的服务器端标头 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Headers"><code>Access-Control-Allow-Headers</code></a> 回答。</p>
<div><pre data-signature="2SZE5mfeHVjgHq++k1mDWyZu+y9QI5l74xzYFoYTK4w="><code><span><span>Access-Control-Request-Headers</span><span>:</span> <span>&lt;field-name&gt;[, &lt;field-name&gt;]*</span></span>
</code></pre></div>
<p>相关示例见<a href="#%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82">这里</a>。</p></div><h2 id="规范"><a href="#规范">规范</a></h2><table><thead><tr><th scope="col">Specification</th></tr></thead><tbody><tr><td><a href="https://fetch.spec.whatwg.org/#http-access-control-allow-origin">Fetch Standard<!-- --> <br><small># <!-- -->http-access-control-allow-origin</small></a></td></tr></tbody></table><h2 id="浏览器兼容性"><a href="#浏览器兼容性">浏览器兼容性</a></h2><a href="https://github.com/mdn/browser-compat-data/issues/new?mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTTP%2FCORS&amp;metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EMDN+page+report+details%3C%2Fsummary%3E%0A%0A*+Query%3A+%60http.headers.Access-Control-Allow-Origin%60%0A*+Report+started%3A+2023-11-07T13%3A11%3A55.560Z%0A%0A%3C%2Fdetails%3E&amp;title=http.headers.Access-Control-Allow-Origin+-+%3CSUMMARIZE+THE+PROBLEM%3E&amp;template=data-problem.yml" target="_blank" rel="noopener noreferrer" title="Report an issue with this compatibility data">Report problems with this compatibility data on GitHub</a><figure><figure><table><thead><tr><td></td><th colspan="5" title="desktop"><span></span><span>desktop</span></th><th colspan="6" title="mobile"><span></span><span>mobile</span></th></tr><tr><td></td><th><p>Chrome</p></th><th><p>Edge</p></th><th><p>Firefox</p></th><th><p>Opera</p></th><th><p>Safari</p></th><th><p>Chrome Android</p></th><th><p>Firefox for Android</p></th><th><p>Opera Android</p></th><th><p>Safari on iOS</p></th><th><p>Samsung Internet</p></th><th><p>WebView Android</p></th></tr></thead><tbody><tr><th scope="row"><p><code>Access-Control-Allow-Origin</code></p></th><td aria-expanded="false"></td><td aria-expanded="false"></td><td aria-expanded="false"></td><td aria-expanded="false"></td><td aria-expanded="false"></td><td aria-expanded="false"></td><td aria-expanded="false"></td><td aria-expanded="false"></td><td aria-expanded="false"></td><td aria-expanded="false"></td><td aria-expanded="false"></td></tr></tbody></table></figure></figure><section><h3 id="Legend">Legend</h3><p>Tip: you can click/tap on a cell for more information.</p><dl><p><dt><span><abbr title="Full support"><span>Full support</span></abbr></span></dt><dd>Full support</dd></p></dl></section><p>The compatibility table on this page is generated from structured data. If you'd like to contribute to the data, please check out <a href="https://github.com/mdn/browser-compat-data">https://github.com/mdn/browser-compat-data</a> and send us a pull request.</p><section aria-labelledby="参见"><h2 id="参见"><a href="#参见">参见</a></h2><div><ul>
  <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS/Errors">CORS 错误</a></li>
  <li><a href="https://enable-cors.org/server.html" target="_blank">启用 CORS：如何在服务器中添加 CORS 支持</a></li>
  <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"><code>XMLHttpRequest</code></a></li>
  <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API">Fetch API</a></li>
  <li><a href="https://httptoolkit.tech/will-it-cors" target="_blank">它会 CORS 吗？</a>——交互的 CORS 解释器和生成器</li>
  <li><a href="https://alfilatov.com/posts/run-chrome-without-cors/" target="_blank">如何不带 CORS 的运行 Chrome 浏览器</a></li>
  <li><a href="https://www.telerik.com/blogs/using-cors-with-all-modern-browsers" target="_blank">在所有（现代）浏览器中使用 CORS</a></li>
  <li><a href="https://stackoverflow.com/questions/43871637/no-access-control-allow-origin-header-is-present-on-the-requested-resource-whe/43881141#43881141" target="_blank">Stack Overflow 面对常见问题的解答</a>:
    <ul>
      <li>如何避免 CORS 预检请求</li>
      <li>如何利用 CORS 代理避免“<em>No Access-Control-Allow-Origin header</em>”</li>
      <li>如何修复“<em>Access-Control-Allow-Origin header must not be the wildcard</em>”</li>
    </ul>
  </li>
</ul></div></section></article></main></div></div>