created: 20230603014140777
creator: oeyoews
modified: 20230603014154247
modifier: oeyoews
tags: JavaScript
title: why-super
type: text/vnd.tiddlywiki

在 JavaScript 中，如果一个子类继承了一个父类，子类的构造函数中必须调用 `super()` 函数，以便调用父类的构造函数。这是因为，在 JavaScript 中，子类实例需要继承父类的属性和方法，而且父类的构造函数中可能会对这些属性和方法进行初始化。

如果子类的构造函数中没有调用 `super()` 函数，那么父类的构造函数就不会被调用，子类实例就无法继承父类的属性和方法。这会导致子类实例在使用父类的属性和方法时出现错误。

此外，在 JavaScript 中，如果子类定义了自己的构造函数，则必须在构造函数的开头显式地调用 `super()` 函数，以便调用父类的构造函数。这是因为，如果子类没有显式地调用 `super()` 函数，则默认的构造函数会被创建，该构造函数会自动调用父类的构造函数，但是如果子类定义了自己的构造函数，则默认的构造函数就不会被创建。因此，如果子类定义了自己的构造函数，就必须在其中调用 `super()` 函数，以便调用父类的构造函数。

总之，调用 `super()` 函数是为了确保子类实例能够正确地继承父类的属性和方法，并且能够正确地进行初始化。如果不调用 `super()` 函数，则可能会导致子类实例无法正确地继承父类的属性和方法，从而导致程序出现错误。