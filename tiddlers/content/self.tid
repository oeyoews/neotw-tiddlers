created: 20230526045729546
creator: oeyoews
modified: 20230526045739274
modifier: oeyoews
tags: NodeJs
title: self
type: text/vnd.tiddlywiki

在 JavaScript 中，`self` 是一个全局对象，它引用了当前窗口或全局范围内的对象。在浏览器中，`self` 指向 `window` 对象。在 Node.js 环境中，`self` 指向 `global` 对象。

`self` 对象可以用来引用全局作用域内的变量和函数，以及在 Web Worker 中引用当前 Worker 线程的上下文对象。

以下是一个在浏览器环境中使用 `self` 的示例代码：

```
self.addEventListener('message', function(event) {
  console.log('Received message:', event.data);
  self.postMessage('Hello from the worker');
});
```

在这个示例中，我们在 Web Worker 线程中注册了一个 `message` 事件的监听器，并在事件处理程序中使用 `self` 引用当前 Worker 线程的上下文对象。在事件处理程序中，我们使用 `console.log` 函数输出接收到的消息，并使用 `self.postMessage` 方法将一条消息发送回主线程。

请注意，`self` 和 `window` 在浏览器环境中是等价的。因此，在浏览器中，您可以使用 `self` 和 `window` 交替使用来引用全局对象。但是，在 Web Worker 线程中，`self` 是唯一可用的全局对象引用。

在 Node.js 环境中，`self` 和 `global` 是等价的。因此，您可以使用 `self` 或 `global` 来引用全局对象。

以下是一个在 Node.js 环境中使用 `self` 的示例代码：

```
self.setTimeout(function() {
  console.log('Hello from the worker');
}, 1000);
```

在这个示例中，我们在 Node.js 环境中使用 `self` 引用全局对象，并使用 `setTimeout` 方法延迟一秒钟输出一条消息。

总之，`self` 是一个全局对象，它引用了当前窗口或全局范围内的对象。在浏览器环境中，`self` 指向 `window` 对象。在 Node.js 环境中，`self` 指向 `global` 对象。